#include<bits/stdc++.h>

static bool myCompare(pair<int,int> p1, pair<int,int> p2) {
    if(p1.first == p2.first) return p1.second > p2.second; // if two times have same value then 'arrival time' must appear first in the sorted array

    return p1.first < p2.first;
}
bool Solution::hotel(vector<int> &arrive, vector<int> &depart, int K) {
     vector<pair<int, int> > ans;
     int n=arrive.size();
 
    // create a common vector both arrivals
    // and departures.
    for (int i = 0; i < n; i++) {
        ans.push_back(make_pair(arrive[i], 1));
        ans.push_back(make_pair(depart[i], 0));
    }
 
    // sort the vector
    sort(ans.begin(), ans.end(), myCompare);
 
    int curr_active = 0, max_active = 0;
 
    for (int i = 0; i < ans.size(); i++) {
 
        // if new arrival, increment current
        // guests count and update max active
        // guests so far
        if (ans[i].second == 1) {
            curr_active++;
            max_active = max(max_active,
                             curr_active);
        }
 
        // if a guest departs, decrement
        // current guests count.
        else
            curr_active--;
    }
 
    // if max active guests at any instant
    // were more than the available rooms,
    // return false. Else return true.
    return (K >= max_active);
}
